{"/home/travis/build/npmtest/node-npmtest-netbeast-cli/test.js":"/* istanbul instrument in package npmtest_netbeast_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/lib.npmtest_netbeast_cli.js":"/* istanbul instrument in package npmtest_netbeast_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_netbeast_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_netbeast_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-netbeast-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_netbeast_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_netbeast_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_netbeast_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_netbeast_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_netbeast_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_netbeast_cli.__dirname + '/lib.npmtest_netbeast_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/electron.js":"#!/usr/bin/env node\n\nvar fork = require('child_process').fork\nvar path = require('path')\n//Electron\nvar mainWindow = null\nvar mainURL = null\nconst electron = require('electron')\nconst elecApp = electron.app\nconst BrowserWindow = electron.BrowserWindow\n\nconst indexJs = path.join(__dirname, './index.js')\nvar dashboard = fork(indexJs)\n\nelecApp.on('ready', function() {\n  mainWindow = new BrowserWindow({width: 1000, height: 800, title: 'Netbeast Dashboard | Loading'})\n  mainURL = path.join('file://' + __dirname + '/electron/loading/loading.html')\n  mainWindow.loadURL(mainURL)\n  mainWindow.on('closed', function() {\n      mainWindow = null;\n  })\n})\n\nelecApp.on('activate', function () {\n    if (mainWindow === null) {\n      mainWindow = new BrowserWindow({width: 1000, height: 800, title: 'Netbeast Dashboard'})\n      mainWindow.loadURL(mainURL)\n    }\n})\n\nelecApp.on('window-all-closed', function () {\n    if (process.platform !== 'darwin') {\n     elecApp.quit()\n    }\n    mainWindow = null;\n})\n\ndashboard.on('message', function(data) {\n   console.log(data)\n   mainURL = 'http://localhost:8000'\n   mainWindow.loadURL(mainURL)\n})\n\nprocess.on('exit', function () {\n\tdashboard.kill()\n})","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/gulpfile.js":"require('dotenv').load()\n\nvar gulp = require('gulp')\nvar plugins = require('gulp-load-plugins')()\nvar source = require('vinyl-source-stream')\nvar buffer = require('vinyl-buffer')\nvar browserify = require('browserify')\nvar watchify = require('watchify')\n\nvar bgTask\n\nvar manifest = require('./package.json')\nprocess.env.VERSION = manifest.version\n\ngulp.task('default', ['serve', 'watchify'], function () {\n  plugins.livereload.listen()\n  gulp.watch('./public/styles/*.scss', ['sass'])\n})\n\ngulp.task('serve', function () {\n  plugins.nodemon({\n    script: './index.js',\n    watch: ['./index.js', 'src']\n  })\n})\n\ngulp.task('start-bg', bgTask = plugins.bg('node', './index.js'))\n\ngulp.task('pre-test', function () {\n  return gulp.src(['./test/**/*.js'])\n  .pipe(plugins.istanbul())\n  .pipe(plugins.istanbul.hookRequire())\n})\n\ngulp.task('coverage', ['start-bg', 'pre-test'], function () {\n  // make test\n  return gulp.src(['./test/**/*.js'], { read: false })\n  .pipe(plugins.wait(3000))\n  .pipe(plugins.mocha({reporter: 'spec', bail: true}))\n  .pipe(gulp.dest(''))\n  .pipe(plugins.istanbul.writeReports({ dir: './test/coverage' }))\n  .once('end', function () {\n    bgTask.setCallback(function () { process.exit(0) })\n    bgTask.stop(0)\n  })\n  .once('error', function () {\n    bgTask.setCallback(function () { process.exit(0) })\n    bgTask.stop(0)\n  })\n})\n\ngulp.task('test', ['start-bg'], function () {\n  // make test\n  return gulp.src(['./test/**/*.js'], { read: false })\n  .pipe(plugins.wait(3000))\n  .pipe(plugins.mocha({ reporter: 'spec', bail: true }))\n  .pipe(gulp.dest(''))\n  .once('end', function () {\n    bgTask.setCallback(function () { process.exit(0) })\n    bgTask.stop(0)\n  })\n  .once('error', function () {\n    bgTask.setCallback(function () { process.exit(0) })\n    bgTask.stop(0)\n  })\n})\n\ngulp.task('build', ['sass', 'browserify'])\n\ngulp.task('sass', function () {\n  gulp.src('./public/styles/style.scss')\n  .pipe(plugins.plumber())\n  .pipe(plugins.sourcemaps.init())\n  .pipe(plugins.sass())\n  .pipe(plugins.autoprefixer())\n  .pipe(plugins.cssnano())\n  .pipe(plugins.sourcemaps.write('./'))\n  .pipe(gulp.dest('./public/dist'))\n  .pipe(plugins.livereload())\n})\n\ngulp.task('watchify', function () {\n  // set up the browserify instance on a task basis\n  var bundler = watchify(\n    browserify({\n      entries: './public/components/index.jsx',\n      debug: true\n    })\n  ).transform('babelify', { presets: ['es2015', 'react'] })\n  .transform('envify')\n\n  bundler.on('update', function () { compile(bundler) })\n  return compile(bundler)\n})\n\ngulp.task('browserify', function () {\n  // set up the browserify instance on a task basis\n  var bundler = browserify({\n    entries: './public/components/index.jsx',\n    debug: true\n  }).transform('babelify', { presets: ['es2015', 'react'] })\n  .transform('envify')\n\n  return compile(bundler)\n})\n\nfunction compile (bundler) {\n  return bundler.bundle()\n  .on('error', function (err) {\n    console.error(err.message)\n    this.emit('end')\n  })\n  .pipe(source('bundle.js'))\n  .pipe(buffer())\n  .pipe(plugins.sourcemaps.init({ loadMaps: true }))\n  .pipe(plugins.sourcemaps.write('./'))\n  .pipe(gulp.dest('./public/dist'))\n  .pipe(plugins.livereload())\n}\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/lib/api.js":"var request = require('superagent')\n\nmodule.exports = {\n  restart: function (app) {\n    var url = 'http://' + 'localhost' + ':' + '8000' + '/api/activities/' + app\n    request.del(url, function (err, resp, body) {\n      if (err) throw err\n\n        request.post(url, function (err, resp, body) {\n          if (err) throw err\n            console.log('Done.')\n        })\n    })\n  },\n  stop: function (app) {\n    var url = 'http://' + 'localhost' + ':' + '8000' + '/api/activities/' + app\n    request.del(url, function (err, resp, body) {\n      if (err) throw err\n        console.log('Done.')\n    })\n  },\n  launch: function (app) {\n    var url = 'http://' + 'localhost' + ':' + '8000' + '/api/activities/' + app\n\n    request.post(url, function (err, resp, body) {\n      if (err) throw err\n        console.log('Done.')\n    })\n  },\n  uninstall: function (app) {\n    console.log('Uninstalling app ' + app + '...')\n\n    var url = 'http://' + 'localhost' + ':' + '8000' + '/api/apps/' + app\n    request.del(url, function (err, resp, body) {\n      if (err) throw err\n        console.log('%s responded code %s\\n%s', url, resp.statusCode, body)\n    })\n  }\n}","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/lib/app.js":"// Netbeast App model\n// by jesusdario\n// CTO @ NetBeast\n\nvar path = require('path')\n\nvar fs = require('fs-extra')\n\nvar self\n/* Application constructor */\nfunction App (name) {\n  self = this\n  self.name = name\n}\n\nconst APP_BUNDLE = __dirname + '/../bin/bundles/base-app'\nconst PLUGIN_BUNDLE = __dirname + '/../bin/bundles/base-plugin'\nconst CURRENT_DIR = process.cwd()\n\n/* Non-static methods and properties */\nApp.prototype.constructor = App\n\nApp.create = function (appName, options) {\n  _quitIfExists(appName)\n\n  var destination = path.join(CURRENT_DIR, appName)\n  var destJson = path.join(destination, 'package.json')\n\n  var bundle = (options.plugin) ? PLUGIN_BUNDLE : APP_BUNDLE\n\n  console.log(\"> Creating app '%s'...\", appName)\n  fs.copySync(bundle, destination)\n  var pkgJson = fs.readJsonSync(destJson)\n  pkgJson.name = appName\n  fs.writeJsonSync(destJson, pkgJson)\n  console.log('> The extraction has ended!')\n  console.log('> You may want to install app dependences. Type:\\n')\n  console.log('\\t cd ./%s;', appName)\n  console.log('\\t npm install;\\n')\n}\n\nfunction _quitIfExists (file) {\n  if (fs.existsSync(file)) {\n    console.log(\"> Path '%s' already exists\", file)\n    process.exit(0)\n  }\n}\n\nfunction _quitIfNotExists (file) {\n  if (!fs.existsSync(file)) {\n    console.log(\"> Path '%s' does not exists\", file)\n    process.exit(0)\n  }\n}\n\nmodule.exports = App\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/lib/init.js":"\n// Load environment variables\nrequire('dotenv').config({ path: __dirname + '/../.env'})\n\nvar os = require('os')\n\nvar interfaces = os.networkInterfaces()\nvar addresses = []\nfor (var i in interfaces) {\n  for (var j in interfaces[i]) {\n    var address = interfaces[i][j]\n    if (address.family === 'IPv4' && !address.internal) {\n      addresses.push(address.address)\n    }\n  }\n}\n\nprocess.env.IPs = addresses.join(',')\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/lib/publish.js":"// var Promise = require('bluebird')\n// var request = require('superagent-bluebird-promise')\n// var fs = require('fs')\n// var sha1 = require('sha1')\n// var inquirer = require('inquirer')\n// var Spinner = require('cli-spinner').Spinner\n// var validateApp = require('./util/validate-app')\n// var nconf = require('nconf')\n//\n// nconf.file('.nconf')\n//\n// module.exports = function (app) {\n//   if (!validateApp(app)) {\n//     return console.error('Invalid file type. Must be a tar.gz')\n//   }\n//\n//   var login = 'https://netbeast.co/api/login'\n//   var push = 'https://netbeast.co/api/apps'\n//   var cookies = request.jar()\n//   var spinner // loading icon\n//\n//   var questions = [{\n//     name: 'email',\n//     message: 'Type your netbeast account email',\n//     type: 'type'\n//   }, {\n//     name: 'password',\n//     message: 'Type your netbeast account password',\n//     type: 'password',\n//     filter: sha1\n//   }]\n//\n//   Promise.all([\n//     function (callback) {\n//       if (nconf.get('answers')) {\n//         Promise.resolve(nconf.get('answers'))\n//       } else {\n//         inquirer.prompt(questions, function (answers) {\n//           nconf.set('answers', answers)\n//           Promise.resolve(answers)\n//         })\n//       }\n//     },\n//     function (answers) {\n//       request.post(login).send(answers).end(function (err, resp){\n//         if (resp.statusCode !== 200) {\n//           return console.log('Login incorrect')\n//         }\n//\n//         // save user email and pass\n//         nconf.save(function (err) {\n//           if (err) throw err\n//         })\n//       })\n//     },\n//     function ()\n//\n//       // loading symbol\n//       spinner = new Spinner('Pushing app to market... %s')\n//       spinner.setSpinnerString('|/-\\\\')\n//       spinner.start()\n// \n//       // pushing app\n//       var req = request.post({url: push, jar: cookies}, callback)\n//       var form = req.form()\n//       form.append('file', fs.createReadStream(app))\n//     }], function (err, resp, body) {\n//     if (err) throw err\n//     spinner.stop()\n//     console.log('\\n%s responded code %s\\n%s',\n//           push, resp.statusCode, body)\n//   })\n// }\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/lib/scan.js":"var dgram = require('dgram')\n\nvar freeport = require('freeport')\nvar Spinner = require('cli-spinner').Spinner\n\nmodule.exports = function (done) {\n  var result = []\n  var client = dgram.createSocket('udp4')\n  const MCAST_IP = '239.0.16.18'\n  const MCAST_PORT = 16180\n\n  freeport(function (err, port) {\n    if (err) throw err\n    client.bind(port, '0.0.0.0')\n  })\n\n  client.on('listening', function () {\n    var msg = new Buffer('hi')\n\n    var spinner = new Spinner('Looking for netbeasts... %s')\n    spinner.setSpinnerString('|/-\\\\')\n    spinner.start()\n\n    // Poll N times for Netbeast router's in subnet\n    // =====================================\n    const N = 3\n    for (var i = 0; i < N; i++) {\n      setTimeout(function () {\n        client.send(msg, 0, msg.length, MCAST_PORT, MCAST_IP, function (err, bytes) {\n          if (err) throw err\n        })\n      }, i * 1000)\n    }\n\n    // Close client after N attempts\n    setTimeout(function () {\n      client.close()\n      spinner.stop()\n      if (result.length === 0) {\n        console.log('No Netbeast routers found in subnet.')\n      }\n      console.log('\\nDone.\\n')\n\n      if (typeof done === 'function') return done(result)\n    }, N * 1000)\n  })\n\n  client.on('message', function (msg, req) {\n    var beast = { address: req.address, port: msg.toString() }\n    if (_notListed(result, beast)) {\n      if (result.length === 0) {\n        console.log('\\n# Netbeast at reach')\n        console.log('=====================')\n      }\n      console.log('* Netbeast alive at %s:%s', beast.address, beast.port)\n      result.push(beast)\n      if (typeof done === 'function') return done(result)\n    }\n  })\n}\n\nfunction _notListed (arr, obj) {\n  var notListed = true\n  arr.forEach(function (item) {\n    if (item.address === obj.address) {\n      notListed = false\n    }\n  })\n  return notListed\n}\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/lib/start.js":"\nvar path = require('path')\nvar spawn = require('child_process').spawn\n\nconst DASHBOARD_BIN = path.join(__dirname, '../index.js')\n\nmodule.exports = function (options) {\n  var opts = {\n    max: 1,\n    killTree: true,\n    cwd: path.resolve(__dirname, '..')\n  }\n\n  var dashboard = spawn('node', [DASHBOARD_BIN, '--port', options.port, '--secure_port', options.secure_port ] , opts)\n  dashboard.stdout.on('data', function (data) {\n    console.log(data.toString())\n  })\n  dashboard.stderr.on('data', function (data) {\n    console.log(data.toString())\n  })\n  dashboard.on('error', function (err) {\n    console.trace(err)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/src/boot-on-load.js":"var Promise = require('bluebird')\nvar chalk = require('chalk')\n\nvar App = require('./models/app')\nvar Activity = require('./models/activity')\n\n// start apps that must be initialized on boot\nmodule.exports = function bootOnload () {\n  App.modules(function (err, apps) {\n    if (err) throw err\n\n    Promise.map(apps, function (app) {\n      if (!app || !app.netbeast || !app.netbeast.bootOnLoad) return Promise.resolve()\n\n      Activity.boot(app.name, function (err, port) {\n        if (err) return Promise.reject(err)\n\n        console.info('🚀  [booting] %s launched on port %s ', app.name, port.port)\n        Promise.resolve(port.port)\n      })\n    }).catch(function (err) {\n      if (err) throw err\n    })\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/src/models/app.js":"var path = require('path')\n\nvar Promise = require('bluebird')\nvar fs = Promise.promisifyAll(require('fs-extra'))\n\nvar ApiError = require('../util/api-error')\nvar _install = require('./_install')\n\nvar App = module.exports = {}\nconst APPS_DIR = process.env.APPS_DIR\n\nApp.modules = function (done) {\n  fs.readdirAsync(APPS_DIR).then(function (files) {\n    return Promise.filter(files, function (file, callback) {\n      return fs.lstatAsync(APPS_DIR + '/' + file).then(function (stats) {\n        return stats.isDirectory()\n      })\n    }).then(function (directories) {\n      return Promise.map(directories, function (directory) {\n        return new Promise(function (resolve, reject) {\n          App.getPackageJson(directory, function (err, pkg) {\n            if (err) return reject(err)\n            return resolve(pkg)\n          })\n        })\n      })\n    }).then(function (packages) {\n      packages = packages.filter(function (pkg) { return pkg }) // Avoid crash when app folder is empty\n      return done(null, packages)\n    }).catch(done)\n  })\n}\n\nApp.all = function (done) {\n  App.modules(function (err, apps) {\n    if (err) return done(err)\n\n    const plugins = apps.filter(function (app) {\n      return !(app.netbeast && app.netbeast.type === 'plugin')\n    })\n\n    done(null, plugins)\n  })\n}\n\nApp.plugins = function (done) {\n  App.modules(function (err, apps) {\n    if (err) return done(err)\n    const plugins = apps.filter(function (app) {\n      return app.netbeast && app.netbeast.type === 'plugin'\n    })\n\n    done(null, plugins)\n  })\n}\n\nApp.delete = function (app, done) {\n  if (!fs.existsSync(path.join(APPS_DIR, app))) {\n    return done(new ApiError(404, app + ' is not installed'))\n  }\n\n  fs.remove(path.join(APPS_DIR, app), done)\n}\n\nApp.getPackageJson = function (app, done) {\n  const dir = path.join(APPS_DIR, app)\n  if (!fs.existsSync(dir)) {\n    return done(new ApiError(404, app + ' is not installed'))\n  }\n\n  fs.readJson(path.join(dir, 'package.json'), function (err, pkg) {\n    if (err && err.code === 'ENOENT') return done()\n    done(err, pkg)\n  })\n}\n\nApp.install = function (bundle, done) {\n  if (_isUrl(bundle)) return _install.from.git(bundle, done)\n\n  fs.lstat(bundle, function (err, stats) {\n    if (err) return done(err)\n\n    if (stats.isDirectory()) return _install.from.dir(bundle, done)\n\n    return done(new ApiError(422, 'App does not have proper format'))\n  })\n}\n\nApp.find = function (query, done) {\n  // only querying topics by the moment\n  App.all(function (err, apps) {\n    if (err) return done(err)\n\n    var result = apps.filter(function (app) {\n      return app.netbeast && app.netbeast.topic === query.topic\n    })\n\n    done(null, result)\n  })\n}\n\nfunction _isUrl (s) {\n  var regexp = /(git|ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/\n  return regexp.test(s)\n}\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/src/util/api-error.js":"var util = require('util')\n\nvar text = {\n  400: 'Bad Request',\n  401: 'Unauthorized',\n  403: 'Forbidden',\n  404: 'Not Found',\n  405: 'Method Not Allowed',\n  408: 'Request Timeout',\n  415: 'Unsupported Media Type',\n  422: 'Unprocessable Entity',\n  426: 'Upgrade Required',\n  500: 'Intenal Server Error',\n  501: 'Not Implemented'\n}\n\nfunction ApiError (code, message) {\n  Error.call(this)\n  Error.captureStackTrace(this, arguments.callee)\n  this.message = message || text[code] || 'Internal Server Error'\n  this.statusCode = code || 500\n}\n\nutil.inherits(ApiError, Error)\n\nmodule.exports = ApiError\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/src/models/_install.js":"var path = require('path')\nvar exec = require('child_process').exec\n\nvar request = require('superagent')\nvar git = require('gift')\nvar fs = require('fs-extra')\n\nvar ApiError = require('../util/api-error')\nvar broker = require('../helpers/broker')\n\nfunction _installDeps (app, done) {\n  const root = path.join(process.env.APPS_DIR, app.name)\n  const modules = path.join(root, 'node_modules')\n\n  if (fs.existsSync(modules)) {\n    return done(null, app)\n  }\n\n  broker.info('Downloading ' + app.name + ' dependencies...')\n\n  exec('npm i', {cwd: root}, function (err, data) {\n    return done(err, app) // data is not app\n  })\n}\n\nfunction _installFromDir (dir, done) {\n  const file = path.join(dir, 'package.json')\n\n  if (!fs.existsSync(file)) {\n    return done(new Error('App does not have a package.json'))\n  }\n\n  const appJson = fs.readJsonSync(file, {throws: false})\n  if (!appJson) {\n    return done(new Error(\"App's package.json is malformed\"))\n  }\n\n  const appRoot = path.join(process.env.APPS_DIR, appJson.name)\n  if (fs.existsSync(appRoot)) {\n    return done(new ApiError(422, 'App already exists'))\n  }\n\n  // Check if main is an executable file\n  const main = path.resolve(dir, appJson.main)\n  if (!fs.existsSync(main)) {\n    return done(new Error('App does not have a main executable'))\n  } else {\n    fs.chmodSync(main, '700')\n  }\n\n  broker.info('Setting everything up for you...')\n\n  fs.move(dir, appRoot, function (err) {\n    if (err) return done(err)\n\n    _installDeps(appJson, function (err, appJson) {\n      if (!err) return done(null, appJson)\n\n      // Swapping if (err) we get rid of a nesting level\n      fs.remove(appRoot, function (removalError) {\n        if (removalError) broker.error(removalError.message)\n        done(err)\n      })\n    })\n  })\n}\n\nfunction _installFromGit (url, done) {\n  var tmpDir = path.join(process.env.TMP_DIR, '' + new Date().getTime())\n  git.clone(url, tmpDir, function (err, repo) {\n    if (err) return done(err)\n\n    _installFromDir(repo.path, done)\n  })\n}\n\nmodule.exports = {\n  from: {\n    dir: _installFromDir,\n    git: _installFromGit\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/src/helpers/broker.js":"// Broker.js is an instance for socket.io\n// that logs messages to refactor code\n\nvar chalk = require('chalk')\n\nvar mqtt = require('mqtt')\nvar client = mqtt.connect('ws://localhost:' + process.env.PORT)\n\nvar broker = module.exports = {}\n\nbroker.client = client\n\nbroker.client.on('connect', function () {\n  console.log('[broker] online')\n  broker.client.subscribe('#')\n})\n\nclient.on('message', function (topic, message) {\n  topic = topic.toString()\n\n  try {\n    message = JSON.parse(message.toString())\n    if (topic === 'netbeast/push') notificationLogger(message)\n  } catch (e) {\n    console.log('broker got a non JSON object')\n    message = message.toString()\n  }\n  broker.client.emit('#' + topic, message)\n})\n\nbroker.on = function (topic, cb) {\n  broker.client.on(topic, cb)\n}\n\n// title is optional\nbroker.info = function (body, title) {\n  broker.emit({ emphasis: 'info', body: body, title: title })\n}\n\nbroker.error = function (body, title) {\n  broker.emit({ emphasis: 'error', body: body, title: title })\n}\n\nbroker.success = function (body, title) {\n  broker.emit({ emphasis: 'success', body: body, title: title })\n}\n\nbroker.warning = function (body, title) {\n  broker.emit({ emphasis: 'warning', body: body, title: title })\n}\n\nbroker.emit = function (msg) {\n  client.publish('netbeast/push', JSON.stringify(msg))\n}\n\nfunction notificationLogger (msg) {\n  // Log notification through console\n  var str = ''\n\n  msg.emphasis = msg.emphasis || 'info'\n  msg.body = ' ' + msg.body + ' '\n\n  switch (msg.emphasis) {\n    case 'error':\n      str = chalk.bold.bgRed(' #' + msg.title + ' ')\n      str = str + chalk.bgRed(msg.body)\n      break\n    case 'warning':\n      str = chalk.bold.bgYellow(' #' + msg.title + ' ')\n      str = str + chalk.bgYellow(msg.body)\n      break\n    case 'info':\n      str = chalk.bold.bgCyan(' #' + msg.title + ' ')\n      str = str + chalk.bgCyan(msg.body)\n      break\n    case 'success':\n      str = chalk.bold.bgGreen(' #' + msg.title + ' ')\n      str = str + chalk.bgGreen(msg.body)\n      break\n  }\n\n  console.log(str)\n}\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/src/models/activity.js":"var path = require('path')\nvar events = require('events')\nvar spawn = require('child_process').spawn\n\nvar freeport = require('freeport')\nvar chalk = require('chalk')\nvar request = require('superagent')\nvar mqtt = require('mqtt')\n\nvar broker = require('../helpers/broker')\nvar ApiError = require('../util/api-error')\nvar Resource = require('./resource')\nvar App = require('./app')\n\nconst APPS_DIR = process.env.APPS_DIR\n\n// Apps with their child object running\nvar children = {}\nvar self = module.exports = new events.EventEmitter()\nvar client = mqtt.connect() // for notifications\n\nself.status = function (req, res, next) {\n  var child = children[req.params.name]\n  if (!child) return res.json({ name: req.params.name, port: -1, status: 'Not running' })\n\n  self.ready(child, function (err, act) {\n    if (err) return next(err)\n    res.json({ name: act.name, port: act.port })\n  })\n}\n\nself.stop = function (appName, done) {\n  if (children[appName]) {\n    console.log('Sending SIGTERM to ' + appName)\n    children[appName].process.kill('SIGTERM')\n    children[appName] = undefined\n  }\n  done()\n}\n\nself.get = function (appName) {\n  return children[appName]\n}\n\nself.all = function (done) {\n  App.modules(function (err, apps) {\n    if (err) return done(err)\n\n    apps = apps.filter(function (app) {\n      return children[app.name]\n    })\n\n    done(null, apps)\n  })\n}\n\nself.ready = function (child, done) {\n  if (child.ready) return done(null, child)\n\n  const APP_URL = 'http://localhost:' + child.port\n  const MAX_TRIALS = 20\n  var k = 0\n\n  ;(function keepTrying () {\n    if (k >= MAX_TRIALS) return done(new ApiError(405, 'Impossible to launch the application'))\n\n    request(APP_URL).end(function (err, resp) {\n      if (err && err.code === 'ECONNREFUSED') {\n        k++\n        return setTimeout(keepTrying, 400)\n      } else if (!err || err.status === 404) {\n        child.ready = true\n        return done(null, child)\n      } else {\n        console.log(err)\n        return done(err)\n      }\n    })\n  })()\n}\n\nself.boot = function (appName, done) {\n  var child = { name: appName }\n\n  if (children[appName]) {\n    return done(null, children[child.name])\n  }\n\n  freeport(function (err, port) {\n    if (err) {\n      done(new ApiError(422, 'Not enough ports'))\n    } else {\n      child.port = port\n      self.emit('start', child)\n      done(null, child)\n    }\n  })\n}\n\nself.on('start', function (app) {\n  if (children[app.name]) return\n\n  App.getPackageJson(app.name, function (err, pkgJson) {\n    if (err) return broker.error(err.toString())\n\n    // *****************\n    // Child management\n    // *****************\n\n    var entryPoint = path.resolve(APPS_DIR, app.name, pkgJson.main)\n\n    var env = Object.create(process.env)\n    env.APP_PORT = app.port\n    env.APP_NAME = app.name\n    env.NETBEAST = process.env.IPs.split(',')[0] + ':' + process.env.PORT\n    env.SECURE_NETBEAST = process.env.IPs.split(',')[0] + ':' + process.env.SECURE_PORT\n\n      var child = spawn('node', [entryPoint, '--port', app.port], {\n          cwd: path.join(APPS_DIR, app.name),\n          env: env\n      })\n\n    child.stdout.on('data', function (data) {\n      process.stdout.write(chalk.grey('[' + app.name + '] '+ data))\n    })\n\n    child.stderr.on('data', function (data) {\n      process.stdout.write(chalk.red('[' + app.name + '] '+ data))\n      broker.error(data.toString(), app.name)\n    })\n\n    child.on('close', function (code) {\n      client.publish('netbeast/activities/close', app.name)\n      Resource.destroy({ app: app.name })\n      children[app.name] = undefined\n    })\n\n    child.on('error', function (error) {\n      broker.error(' exited with code ' + error || 0, app.name)\n      console.trace(error)\n      children[app.name] = undefined\n    })\n\n    app.process = child\n    children[app.name] = app\n  })\n})\n\nprocess.on('exit', function () {\n  for (var key in children) {\n    children[key].process.kill('SIGTERM')\n  }\n})\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/src/models/resource.js":"var util = require('util')\n\nvar Promise = require('bluebird')\nvar chalk = require('chalk')\nvar _ = require('lodash')\n\nvar helper = require('../helpers/resource')\nvar ApiError = require('../util/api-error')\n\nconst macRegex = /^(([A-Fa-f0-9]{2}[:]){5}[A-Fa-f0-9]{2}[,]?)+$/\nconst ipRegex = /^(?!0)(?!.*\\.$)((1?\\d?\\d|25[0-5]|2[0-4]\\d)(\\.|$)){4}$/\n\nhelper.createTable(function (err, data) {\n  if (err) throw err\n})\n\nfunction Resource (item) {\n\n  this.id = item.id\n  this.alias = item.alias\n  this.app = item.app\n  this.location = item.location\n  this.topic = item.topic\n  this.groupname = item.groupname\n  this.hook = item.hook\n\n  try {\n    const hookTail = item.hook.split('/')[item.hook.split('/').length - 1]\n    if (macRegex.test(hookTail)) this.mac = hookTail\n    if (ipRegex.test(hookTail)) this.ip = hookTail\n  } catch (e) { /* console.log(chalk.grey('[warning] rosources without hook')) */ }\n}\n\nResource.create = function (item, done) {\n  return (new Resource(item)).save(done)\n}\n\nResource.prototype.destroy = function (done) {\n  helper.deleteAction(this.id, function (err) {\n    if (err) return done(err)\n\n      if (typeof done === 'function') return done(null)\n    })\n}\n\nResource.find = function (query, done) {\n  var result = []\n  helper.findAction(query, function (err, row) {\n    if (err) return done(err)\n      if (_.isEmpty(row)) return done(new ApiError(404, 'Resource not found DB'))\n\n      row.forEach(function (action) {\n        result.push(new Resource(action))\n      })\n\n      return done(null, result)\n    })\n}\n\nResource.findOne = function (query, done) {\n  helper.findAction(query, function (err, row) {\n    if (err) return done(err)\n      if (row.length < 1) return done(new ApiError(404, 'Resource not found DB'))\n\n        return done(null, new Resource(row[row.length - 1]))\n    })\n}\n\nResource.prototype.save = function (done) {\n  var self = this\n  var schema = {\n    alias: this.alias,\n    app: this.app,\n    location: this.location,\n    topic: this.topic,\n    groupname: this.groupname,\n    hook: this.hook\n  }\n  helper.insertAction(schema,\tfunction (err) {\n    if (err) return done(err)\n\n      Resource.findOne({app: self.app}, done)\n  })\n}\n\nResource.update = function (query, value, done) {\n  helper.updateAction(query, value, function (err) {\n    if (err) return done(err)\n\n      return done()\n  })\n}\n\nResource.destroy = function (query, done) {\n  Resource.find(query, function (err, resources) {\n    if (err && err.statusCode !== 404) {\n      return done(err)\n    }\n\n    if (!resources || _.isEmpty(resources)) {\n      if (typeof done === 'function') return done(null, 0)\n    } else {\n      Promise.map(resources, function (item) {\n        return new Promise(function (resolve, reject) {\n          item.destroy(function (err) {\n            if (err) return reject(err)\n            return resolve()\n          })\n        })\n      }).then(function () {\n        if (typeof done === 'function') return done()\n      }).catch(done)\n    }\n  })\n}\n\nmodule.exports = Resource\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/src/helpers/resource.js":"var sqlite3 = require('sqlite3').verbose()\nvar crypto = require('crypto')\n\nvar db = new sqlite3.Database(process.env.DATABASE_URI)\n\nvar helper = module.exports = {}\n\nhelper.createTable = function (done) {\n  db.run('CREATE TABLE IF NOT EXISTS resources(' +\n  'id TEXT PRIMARY KEY NOT NULL, ' +\n  'alias TEXT, ' +\n  'app TEXT NOT NULL, ' +\n  'location TEXT, ' +\n  'topic TEXT NOT NULL, ' +\n  'groupname TEXT, ' +\n  'hook TEXT NOT NULL)',\n  done)\n}\n\nhelper.insertAction = function (query, done) {\n  var id = crypto.createHash('sha1').update(query.app + query.hook).digest('hex')\n  var statement = db.prepare('INSERT INTO resources (' +\n  \"'id', 'alias', 'app', 'location', 'topic', 'groupname', 'hook') \" +\n  'VALUES (?,?,?,?,?,?,?)')\n  statement\n  .run(id, query.alias, query.app, query.location, query.topic, query.groupname, query.hook, done)\n  statement.finalize()\n}\n\nhelper.deleteAction = function (id, done) {\n  db.run(\"DELETE FROM resources WHERE id = '\" + id + \"'\", done)\n}\n\nhelper.findAction = function (query, done) {\n  if (Object.keys(query).length < 1) {\n    // Devuelve los diferentes Hooks que identifican al objeto\n    db.all('SELECT * FROM resources', done)\n  } else {\n    var sql_statement = 'SELECT * FROM resources WHERE '\n    for (var field in query) {\n      sql_statement += field + \"='\" + query[field] + \"' AND \"\n    }\n    var aux = sql_statement.lastIndexOf('AND')\n    sql_statement = sql_statement.substring(0, aux)\n    db.all(sql_statement, done)\n  }\n}\n\nhelper.updateAction = function (query, value, done) {\n  var key = Object.keys(query)[0]\n  var newvalue = Object.keys(value)[0]\n  db.run('UPDATE resources SET ' + newvalue + \"='\" + value[newvalue] +\n  \"' WHERE \" + key + \"='\" + query[key] + \"'\", done)\n}\n"}