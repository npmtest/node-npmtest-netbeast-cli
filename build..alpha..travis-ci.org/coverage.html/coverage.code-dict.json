{"/home/travis/build/npmtest/node-npmtest-netbeast-cli/test.js":"/* istanbul instrument in package npmtest_netbeast_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/lib.npmtest_netbeast_cli.js":"/* istanbul instrument in package npmtest_netbeast_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_netbeast_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_netbeast_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-netbeast-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_netbeast_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_netbeast_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_netbeast_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_netbeast_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_netbeast_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_netbeast_cli.__dirname + '/lib.npmtest_netbeast_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/electron.js":"#!/usr/bin/env node\n\nvar fork = require('child_process').fork\nvar path = require('path')\n//Electron\nvar mainWindow = null\nvar mainURL = null\nconst electron = require('electron')\nconst elecApp = electron.app\nconst BrowserWindow = electron.BrowserWindow\n\nconst indexJs = path.join(__dirname, './index.js')\nvar dashboard = fork(indexJs)\n\nelecApp.on('ready', function() {\n  mainWindow = new BrowserWindow({width: 1000, height: 800, title: 'Netbeast Dashboard | Loading'})\n  mainURL = path.join('file://' + __dirname + '/electron/loading/loading.html')\n  mainWindow.loadURL(mainURL)\n  mainWindow.on('closed', function() {\n      mainWindow = null;\n  })\n})\n\nelecApp.on('activate', function () {\n    if (mainWindow === null) {\n      mainWindow = new BrowserWindow({width: 1000, height: 800, title: 'Netbeast Dashboard'})\n      mainWindow.loadURL(mainURL)\n    }\n})\n\nelecApp.on('window-all-closed', function () {\n    if (process.platform !== 'darwin') {\n     elecApp.quit()\n    }\n    mainWindow = null;\n})\n\ndashboard.on('message', function(data) {\n   console.log(data)\n   mainURL = 'http://localhost:8000'\n   mainWindow.loadURL(mainURL)\n})\n\nprocess.on('exit', function () {\n\tdashboard.kill()\n})","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/bin/cli.js":"#!/usr/bin/env node\n\n// Netbeast app tool suite\n// By jesus, NetBeast CTO\n// jesus@netbeast.co\n// ====================\n\nrequire('../lib/init')\n\nvar path = require('path')\nvar cli = require('commander')\nvar fs = require('fs-extra')\n\nvar App = require('../lib/app')\nvar scan = require('../lib/scan')\nvar start = require('../lib/start')\nvar api = require('../lib/api')\n\nvar pkg = require('../package.json')\n\ncli.version(pkg.version)\n\n// Init nconf file\nvar nconf_path = path.join(__dirname, '.nconf')\nif (!fs.existsSync(nconf_path)) {\n  fs.writeJsonSync(nconf_path, {})\n}\n\ncli.command('new <app>').alias('create')\n.description('Create the basic app structure')\n.option('--plugin', 'Create the basic plugin struture (no App)')\n.action(App.create)\n\n// cli.command('publish <file>')\n// .description(\"Upload your app to the netbeast's repos\")\n// .action(publish)\n\ncli.command('scan').alias('discover')\n.description('Find available Netbeasts in the subnet')\n.action(scan)\n\n// cli.command('install <file> [host]')\n// .description('Upload an app to a Netbeast remotely')\n// .action(install)\n\ncli.command('forget')\n.description('Reset netbeast-cli configuration')\n.action(function () {\n  fs.removeSync(__dirname + '/.nconf')\n})\n\ncli.command('start')\n.description('Launches netbeast dashboard')\n.option('-p, --port <n>', 'Port to start the HTTP server', parseInt)\n.option('-sp, --secure_port <n>', 'Secure port to start the HTTPS server', parseInt)\n.action(start)\n\ncli.command('uninstall <app>')\n.description('Uninstall an app')\n.action(api.uninstall)\n\ncli.command('stop <app>')\n.description('Stops a running app')\n.action(api.stop)\n\ncli.command('restart <app>')\n.description('Restarts a running app')\n.action(api.restart)\n\ncli.command('launch <app>')\n.description('Launches an installed app')\n.action(api.launch)\n\ncli.parse(process.argv)\n\n// No command specified or unrecognaized command\nif (cli.args.length === 0) {\n  cli.help()\n}\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/lib/init.js":"\n// Load environment variables\nrequire('dotenv').config({ path: __dirname + '/../.env'})\n\nvar os = require('os')\n\nvar interfaces = os.networkInterfaces()\nvar addresses = []\nfor (var i in interfaces) {\n  for (var j in interfaces[i]) {\n    var address = interfaces[i][j]\n    if (address.family === 'IPv4' && !address.internal) {\n      addresses.push(address.address)\n    }\n  }\n}\n\nprocess.env.IPs = addresses.join(',')\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/lib/app.js":"// Netbeast App model\n// by jesusdario\n// CTO @ NetBeast\n\nvar path = require('path')\n\nvar fs = require('fs-extra')\n\nvar self\n/* Application constructor */\nfunction App (name) {\n  self = this\n  self.name = name\n}\n\nconst APP_BUNDLE = __dirname + '/../bin/bundles/base-app'\nconst PLUGIN_BUNDLE = __dirname + '/../bin/bundles/base-plugin'\nconst CURRENT_DIR = process.cwd()\n\n/* Non-static methods and properties */\nApp.prototype.constructor = App\n\nApp.create = function (appName, options) {\n  _quitIfExists(appName)\n\n  var destination = path.join(CURRENT_DIR, appName)\n  var destJson = path.join(destination, 'package.json')\n\n  var bundle = (options.plugin) ? PLUGIN_BUNDLE : APP_BUNDLE\n\n  console.log(\"> Creating app '%s'...\", appName)\n  fs.copySync(bundle, destination)\n  var pkgJson = fs.readJsonSync(destJson)\n  pkgJson.name = appName\n  fs.writeJsonSync(destJson, pkgJson)\n  console.log('> The extraction has ended!')\n  console.log('> You may want to install app dependences. Type:\\n')\n  console.log('\\t cd ./%s;', appName)\n  console.log('\\t npm install;\\n')\n}\n\nfunction _quitIfExists (file) {\n  if (fs.existsSync(file)) {\n    console.log(\"> Path '%s' already exists\", file)\n    process.exit(0)\n  }\n}\n\nfunction _quitIfNotExists (file) {\n  if (!fs.existsSync(file)) {\n    console.log(\"> Path '%s' does not exists\", file)\n    process.exit(0)\n  }\n}\n\nmodule.exports = App\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/lib/scan.js":"var dgram = require('dgram')\n\nvar freeport = require('freeport')\nvar Spinner = require('cli-spinner').Spinner\n\nmodule.exports = function (done) {\n  var result = []\n  var client = dgram.createSocket('udp4')\n  const MCAST_IP = '239.0.16.18'\n  const MCAST_PORT = 16180\n\n  freeport(function (err, port) {\n    if (err) throw err\n    client.bind(port, '0.0.0.0')\n  })\n\n  client.on('listening', function () {\n    var msg = new Buffer('hi')\n\n    var spinner = new Spinner('Looking for netbeasts... %s')\n    spinner.setSpinnerString('|/-\\\\')\n    spinner.start()\n\n    // Poll N times for Netbeast router's in subnet\n    // =====================================\n    const N = 3\n    for (var i = 0; i < N; i++) {\n      setTimeout(function () {\n        client.send(msg, 0, msg.length, MCAST_PORT, MCAST_IP, function (err, bytes) {\n          if (err) throw err\n        })\n      }, i * 1000)\n    }\n\n    // Close client after N attempts\n    setTimeout(function () {\n      client.close()\n      spinner.stop()\n      if (result.length === 0) {\n        console.log('No Netbeast routers found in subnet.')\n      }\n      console.log('\\nDone.\\n')\n\n      if (typeof done === 'function') return done(result)\n    }, N * 1000)\n  })\n\n  client.on('message', function (msg, req) {\n    var beast = { address: req.address, port: msg.toString() }\n    if (_notListed(result, beast)) {\n      if (result.length === 0) {\n        console.log('\\n# Netbeast at reach')\n        console.log('=====================')\n      }\n      console.log('* Netbeast alive at %s:%s', beast.address, beast.port)\n      result.push(beast)\n      if (typeof done === 'function') return done(result)\n    }\n  })\n}\n\nfunction _notListed (arr, obj) {\n  var notListed = true\n  arr.forEach(function (item) {\n    if (item.address === obj.address) {\n      notListed = false\n    }\n  })\n  return notListed\n}\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/lib/start.js":"\nvar path = require('path')\nvar spawn = require('child_process').spawn\n\nconst DASHBOARD_BIN = path.join(__dirname, '../index.js')\n\nmodule.exports = function (options) {\n  var opts = {\n    max: 1,\n    killTree: true,\n    cwd: path.resolve(__dirname, '..')\n  }\n\n  var dashboard = spawn('node', [DASHBOARD_BIN, '--port', options.port, '--secure_port', options.secure_port ] , opts)\n  dashboard.stdout.on('data', function (data) {\n    console.log(data.toString())\n  })\n  dashboard.stderr.on('data', function (data) {\n    console.log(data.toString())\n  })\n  dashboard.on('error', function (err) {\n    console.trace(err)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-netbeast-cli/node_modules/netbeast-cli/lib/api.js":"var request = require('superagent')\n\nmodule.exports = {\n  restart: function (app) {\n    var url = 'http://' + 'localhost' + ':' + '8000' + '/api/activities/' + app\n    request.del(url, function (err, resp, body) {\n      if (err) throw err\n\n        request.post(url, function (err, resp, body) {\n          if (err) throw err\n            console.log('Done.')\n        })\n    })\n  },\n  stop: function (app) {\n    var url = 'http://' + 'localhost' + ':' + '8000' + '/api/activities/' + app\n    request.del(url, function (err, resp, body) {\n      if (err) throw err\n        console.log('Done.')\n    })\n  },\n  launch: function (app) {\n    var url = 'http://' + 'localhost' + ':' + '8000' + '/api/activities/' + app\n\n    request.post(url, function (err, resp, body) {\n      if (err) throw err\n        console.log('Done.')\n    })\n  },\n  uninstall: function (app) {\n    console.log('Uninstalling app ' + app + '...')\n\n    var url = 'http://' + 'localhost' + ':' + '8000' + '/api/apps/' + app\n    request.del(url, function (err, resp, body) {\n      if (err) throw err\n        console.log('%s responded code %s\\n%s', url, resp.statusCode, body)\n    })\n  }\n}"}